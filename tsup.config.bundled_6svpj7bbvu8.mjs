// tsup.config.ts
import { defineConfig } from 'tsup'
import vuePlugin from 'unplugin-vue/esbuild'
import autoPropsPlugin from '@vue.ts/tsx-auto-props/esbuild'

// package.json
const name = 'vue-clerk'
const version = '0.4.11'

// tsup.config.ts
const clerkJsVersion = '5'
const tsup_config_default = defineConfig((overrideOptions) => {
  const isProd = overrideOptions.env?.NODE_ENV === 'production'
  const isWatch = !!overrideOptions.watch
  return {
    entry: ['src/index.ts'],
    format: ['cjs', 'esm'],
    splitting: true,
    clean: true,
    minify: false,
    dts: false,
    esbuildPlugins: [
      vuePlugin(),
      autoPropsPlugin({
        include: ['**/*.vue', '**/*.ts'],
      }),
    ],
    define: {
      PACKAGE_NAME: `"${name}"`,
      PACKAGE_VERSION: `"${version}"`,
      JS_PACKAGE_VERSION: `"${clerkJsVersion}"`,
      __DEV__: `${isWatch}`,
    },
  }
})
export {
  tsup_config_default as default,
}
// # sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidHN1cC5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIi9Vc2Vycy93b2Jzb3JpYW5vL3RtcC92dWUtY2xlcmsvdHN1cC5jb25maWcudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiL1VzZXJzL3dvYnNvcmlhbm8vdG1wL3Z1ZS1jbGVya1wiO2NvbnN0IF9faW5qZWN0ZWRfaW1wb3J0X21ldGFfdXJsX18gPSBcImZpbGU6Ly8vVXNlcnMvd29ic29yaWFuby90bXAvdnVlLWNsZXJrL3RzdXAuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndHN1cCdcblxuaW1wb3J0IHZ1ZVBsdWdpbiBmcm9tICd1bnBsdWdpbi12dWUvZXNidWlsZCdcbmltcG9ydCBhdXRvUHJvcHNQbHVnaW4gZnJvbSAnQHZ1ZS50cy90c3gtYXV0by1wcm9wcy9lc2J1aWxkJ1xuaW1wb3J0IHsgbmFtZSwgdmVyc2lvbiB9IGZyb20gJy4vcGFja2FnZS5qc29uJ1xuXG5jb25zdCBjbGVya0pzVmVyc2lvbiA9ICc1J1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKG92ZXJyaWRlT3B0aW9ucykgPT4ge1xuICBjb25zdCBpc1Byb2QgPSBvdmVycmlkZU9wdGlvbnMuZW52Py5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gIGNvbnN0IGlzV2F0Y2ggPSAhIW92ZXJyaWRlT3B0aW9ucy53YXRjaFxuXG4gIHJldHVybiB7XG4gICAgZW50cnk6IFsnc3JjL2luZGV4LnRzJ10sXG4gICAgZm9ybWF0OiBbJ2NqcycsICdlc20nXSxcbiAgICBzcGxpdHRpbmc6IHRydWUsXG4gICAgY2xlYW46IHRydWUsXG4gICAgbWluaWZ5OiBmYWxzZSxcbiAgICBkdHM6IGZhbHNlLFxuICAgIGVzYnVpbGRQbHVnaW5zOiBbXG4gICAgICB2dWVQbHVnaW4oKSxcbiAgICAgIGF1dG9Qcm9wc1BsdWdpbih7XG4gICAgICAgIGluY2x1ZGU6IFsnKiovKi52dWUnLCAnKiovKi50cyddLFxuICAgICAgfSksXG4gICAgXSxcbiAgICBkZWZpbmU6IHtcbiAgICAgIFBBQ0tBR0VfTkFNRTogYFwiJHtuYW1lfVwiYCxcbiAgICAgIFBBQ0tBR0VfVkVSU0lPTjogYFwiJHt2ZXJzaW9ufVwiYCxcbiAgICAgIEpTX1BBQ0tBR0VfVkVSU0lPTjogYFwiJHtjbGVya0pzVmVyc2lvbn1cImAsXG4gICAgICBfX0RFVl9fOiBgJHtpc1dhdGNofWAsXG4gICAgfSxcbiAgfVxufSlcbiIsICJ7XG4gIFwibmFtZVwiOiBcInZ1ZS1jbGVya1wiLFxuICBcInZlcnNpb25cIjogXCIwLjQuMTFcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIlVub2ZmaWNpYWwgVnVlICsgQ2xlcmsgaW50ZWdyYXRpb24uXCIsXG4gIFwiYXV0aG9yXCI6IFwiUm9iZXJ0IFNvcmlhbm8gPHNvcmlhbm9yb2JlcnRjQGdtYWlsLmNvbT5cIixcbiAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwczovL2dpdGh1Yi5jb20vd29ic29yaWFuby92dWUtY2xlcmsjcmVhZG1lXCIsXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJnaXQraHR0cHM6Ly9naXRodWIuY29tL3dvYnNvcmlhbm8vdnVlLWNsZXJrLmdpdFwiXG4gIH0sXG4gIFwiYnVnc1wiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS93b2Jzb3JpYW5vL3Z1ZS1jbGVyay9pc3N1ZXNcIixcbiAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgXCJhdXRoXCIsXG4gICAgXCJjbGVya1wiXG4gIF0sXG4gIFwiZXhwb3J0c1wiOiB7XG4gICAgXCIuXCI6IHtcbiAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvaW5kZXgubWpzXCIsXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3QvaW5kZXguanNcIlxuICAgIH1cbiAgfSxcbiAgXCJtYWluXCI6IFwiLi9kaXN0L2luZGV4LmpzXCIsXG4gIFwibW9kdWxlXCI6IFwiLi9kaXN0L2luZGV4Lm1qc1wiLFxuICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIixcbiAgXCJmaWxlc1wiOiBbXG4gICAgXCJkaXN0XCJcbiAgXSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImRldlwiOiBcInRzdXAgLS13YXRjaCAtLW9uU3VjY2VzcyBcXFwicG5wbSBidWlsZDpkdHMgJiYgcG5wbSAtLWZpbHRlciBwbGF5Z3JvdW5kIGRldlxcXCJcIixcbiAgICBcImJ1aWxkXCI6IFwidHN1cCAtLWVudi5OT0RFX0VOViBwcm9kdWN0aW9uIC0tb25TdWNjZXNzIFxcXCJwbnBtIGJ1aWxkOmR0c1xcXCJcIixcbiAgICBcImJ1aWxkOmR0c1wiOiBcInZ1ZS10c2MgLS1kZWNsYXJhdGlvbiAtLWVtaXREZWNsYXJhdGlvbk9ubHlcIixcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLlwiLFxuICAgIFwibGludDpmaXhcIjogXCJlc2xpbnQgLiAtLWZpeFwiLFxuICAgIFwicHJlcHVibGlzaE9ubHlcIjogXCJwbnBtIGJ1aWxkXCIsXG4gICAgXCJyZWxlYXNlXCI6IFwicG5wbSBidWlsZCAmJiBjaGFuZ2VzZXQgcHVibGlzaFwiLFxuICAgIFwidGVzdFwiOiBcInZpdGVzdFwiLFxuICAgIFwidXBkYXRlLWRlcHNcIjogXCJ0YXplIC13ICYmIHBucG0gaVwiLFxuICAgIFwidHlwZWNoZWNrXCI6IFwidHNjIC0tbm9FbWl0XCIsXG4gICAgXCJkb2NzOmRldlwiOiBcInZpdGVwcmVzcyBkZXYgZG9jc1wiLFxuICAgIFwiZG9jczpidWlsZFwiOiBcInZpdGVwcmVzcyBidWlsZCBkb2NzXCIsXG4gICAgXCJkb2NzOnNlcnZlXCI6IFwidml0ZXByZXNzIHNlcnZlIGRvY3NcIixcbiAgICBcImRvY3M6cHJldmlld1wiOiBcInZpdGVwcmVzcyBwcmV2aWV3IGRvY3NcIlxuICB9LFxuICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwidnVlXCI6IFwiXjMuMi4wXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGNsZXJrL3NoYXJlZFwiOiBcIl4yLjMuM1wiLFxuICAgIFwiQGNsZXJrL3R5cGVzXCI6IFwiXjQuOC4wXCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGFudGZ1L2VzbGludC1jb25maWdcIjogXCJeMi4yMS4yXCIsXG4gICAgXCJAY2hhbmdlc2V0cy9jbGlcIjogXCJeMi4yNy43XCIsXG4gICAgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tXCI6IFwiXjYuNC42XCIsXG4gICAgXCJAdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnRcIjogXCJeMTQuNS4yXCIsXG4gICAgXCJAdGVzdGluZy1saWJyYXJ5L3Z1ZVwiOiBcIl44LjEuMFwiLFxuICAgIFwiQHZpdGVqcy9wbHVnaW4tdnVlXCI6IFwiXjUuMC41XCIsXG4gICAgXCJAdnVlLnRzL3RzeC1hdXRvLXByb3BzXCI6IFwiXjAuNi4wXCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOS42LjBcIixcbiAgICBcImVzbGludC1wbHVnaW4taW1wb3J0XCI6IFwiXjIuMjkuMVwiLFxuICAgIFwianNkb21cIjogXCJeMjQuMS4wXCIsXG4gICAgXCJ0YXplXCI6IFwiXjAuMTQuMFwiLFxuICAgIFwidHN1cFwiOiBcIl44LjEuMFwiLFxuICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjUuMlwiLFxuICAgIFwidW5wbHVnaW4tdnVlXCI6IFwiXjUuMC41XCIsXG4gICAgXCJ1bnBsdWdpbi12dWUtanN4XCI6IFwiXjAuNC4wXCIsXG4gICAgXCJ2aXRlXCI6IFwiXjUuMy4yXCIsXG4gICAgXCJ2aXRlcHJlc3NcIjogXCIxLjAuMlwiLFxuICAgIFwidml0ZXN0XCI6IFwiXjEuNi4wXCIsXG4gICAgXCJ2dWVcIjogXCJeMy40LjMxXCIsXG4gICAgXCJ2dWUtdHNjXCI6IFwiXjIuMC4yNFwiXG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBMk8sU0FBUyxvQkFBb0I7QUFFeFEsT0FBTyxlQUFlO0FBQ3RCLE9BQU8scUJBQXFCOzs7QUNGMUIsV0FBUTtBQUNSLGNBQVc7OztBREliLElBQU0saUJBQWlCO0FBRXZCLElBQU8sc0JBQVEsYUFBYSxDQUFDLG9CQUFvQjtBQUMvQyxRQUFNLFNBQVMsZ0JBQWdCLEtBQUssYUFBYTtBQUNqRCxRQUFNLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQjtBQUVsQyxTQUFPO0FBQUEsSUFDTCxPQUFPLENBQUMsY0FBYztBQUFBLElBQ3RCLFFBQVEsQ0FBQyxPQUFPLEtBQUs7QUFBQSxJQUNyQixXQUFXO0FBQUEsSUFDWCxPQUFPO0FBQUEsSUFDUCxRQUFRO0FBQUEsSUFDUixLQUFLO0FBQUEsSUFDTCxnQkFBZ0I7QUFBQSxNQUNkLFVBQVU7QUFBQSxNQUNWLGdCQUFnQjtBQUFBLFFBQ2QsU0FBUyxDQUFDLFlBQVksU0FBUztBQUFBLE1BQ2pDLENBQUM7QUFBQSxJQUNIO0FBQUEsSUFDQSxRQUFRO0FBQUEsTUFDTixjQUFjLElBQUksSUFBSTtBQUFBLE1BQ3RCLGlCQUFpQixJQUFJLE9BQU87QUFBQSxNQUM1QixvQkFBb0IsSUFBSSxjQUFjO0FBQUEsTUFDdEMsU0FBUyxHQUFHLE9BQU87QUFBQSxJQUNyQjtBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
