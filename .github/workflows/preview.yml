name: Preview

on:
  issue_comment:
    types: [created]

jobs:
  snapshot:
    name: Build
    if: ${{ contains(github.event.comment.body, '!snapshot') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: pnpm

      - run: pnpm install

      - name: Build
        run: pnpm build

      - name: Run snapshot command and capture output
        id: snapshot
        run: |
          output=$(pnpm dlx pkg-pr-new publish --compact)
          echo "command_output<<EOF" >> $GITHUB_OUTPUT
          echo "$output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              const issueNumber = context.issue.number;
              const owner = context.repo.owner;
              const repo = context.repo.repo;

              console.log(`Issue/PR number: ${issueNumber}`);
              console.log(`Repository: ${owner}/${repo}`);
              console.log(`Event name: ${context.eventName}`);
              console.log(`Action: ${context.action}`);
              console.log(`Actor: ${context.actor}`);
              console.log(`Payload:`, JSON.stringify(context.payload, null, 2));

              if (!repo) {
                throw new Error('Repository name is undefined');
              }

              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner,
                repo,
                body: 'Snapshot command output:\n```\n' +
                      `${{ steps.snapshot.outputs.command_output }}` +
                      '\n```'
              });

              console.log('Comment posted successfully');
            } catch (error) {
              console.log(`Error details: ${error.message}`);
              console.log(`Error stack: ${error.stack}`);
              core.setFailed(`Action failed with error: ${error}`);
            }
